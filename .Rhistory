skim_metal <- skim(metal_bands) %>% as_tibble() %>% print() # saved skim() to keep as a reference point
print(Metal_Bands_BSTA)
metal_bands <- Metal_Bands_BSTA # previewed the data to get a peek of how it's formatted
skim_metal <- skim(metal_bands) %>% as_tibble() %>% print() # saved skim() to keep as a reference point
# filter, make data table showing only U.S. bands
metal_filtered <- metal_bands %>%
filter(origin %in% ("USA"))
# remove the column "...1" (ranked in popularity) and "split" since it is not important in this analysis and takes up space
metal_filtered <- subset(metal_filtered, select = -c(1,6))
# this allows me to minimize unnecessary bulk so I can transform and analyze easier
print(Metal_Bands_BSTA)
metal_bands <- Metal_Bands_BSTA # previewed the data to get a peek of how it's formatted
skim_metal <- skim(metal_bands) %>% as_tibble() %>% print() # saved skim() to keep as a reference point
# filter, make data table showing only U.S. bands
metal_filtered <- metal_bands %>%
filter(origin %in% ("USA"))
# remove the column "...1" (ranked in popularity) and "split" since it is not important in this analysis and takes up space
metal_filtered <- subset(metal_filtered, select = -c(1,6))
# this allows me to minimize unnecessary bulk so I can transform and analyze easier
# mutate and create new table with a factored column labeling which bands formed between the years 1980-1989 and 1990-1999
metal_new <- metal_filtered %>%
mutate(
formed_category = case_when(
formed >= 1980 &
formed < 1990 ~ "1980-1989",
formed >= 1990 &
formed < 2000 ~ "1990-1999"
)) %>%
mutate(formed_category = factor(formed_category))
metal_new <- na.omit(metal_new) # this gets rid of all rows containing N/A
# na.omit shows only bands (all styles) that formed within the two decades
skim_metal_new <- skim(metal_new) %>% as_tibble() %>% print()
# saved this skim table as another reference point, making sure there are no missing values and the completion rate is 1 for all columns
#454 out of 5,000 bands (all styles) that formed in the USA between 1980-1999
# Reminder: objective is to find out the growth/loss rate of bands that are death and/or black metal in the USA, between the two decades
metal_complete <- dplyr::filter( # dplyr::filter because this wouldn't work without specifically calling the package
metal_new, grepl("death|black", style, ignore.case = TRUE)) %>% #grepl(keywords, column)
filter(!duplicated(band_name)) # use !duplicated to make extra sure there is no overlap in band_names
(head(metal_complete)) %>% print()
skim_metal_complete <- skim(metal_complete) %>% as_tibble() %>% view()  # saved for another reference point, looking at this table I'm able to see the band count for either black or death metal style has dropped to 122 over the 2 decades
(head(metal_complete)) %>% print()
skim_metal_complete <- skim(metal_complete) %>% as_tibble()  # saved for another reference point, looking at this table I'm able to see the band count for either black or death metal style has dropped to 122 over the 2 decades
# Reminder: objective is to find out the growth/loss rate of bands that are death and/or black metal in the USA, between the two decades
# shows/organizes how many bands were formed, between the two decades
decade_count <- metal_complete %>%
group_by(formed_category) %>%
summarize(count = n())
gt(decade_count)
# saved this to compare for analysis and visualization, n = 122, 80s = 43, 90s = 79
# shows/organizes total fans between the two decades
fan_count <- metal_complete %>% # shows decade sum of fans
group_by(formed_category) %>%
summarize(sum_fans = sum(fans)) %>% print()
# n = 18,117, 80s = 10,408, 90s = 7709
N_fan_count <- sum(fan_count$sum_fans) # used this to pull for later if needed
# shows/organizes the average # of fans per band between the two decades
mean_fan_group <- metal_complete %>%
group_by(formed_category) %>%
summarize(mean_fans = mean(fans)) %>% print()
# avg 242 fans/band in 80s, avg 97.6 fans/band in 90s
count_and_mean_fans <- bind_cols(fan_count, mean_fan_group[2])
gt(count_and_mean_fans)
# noted- 80s = n(43), 90s = n(79) - the data is showing that though there were less death/black metal bands formed in the 80's the bands that were formed during this period had significantly more fans than those formed in the 90s
blogdown:::serve_site()
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
collapse = TRUE
)
library(skimr) # get overview of data
library(tidyverse) # data management + ggplot2 graphics
library(readxl) # import excel data
library(ggplot2) # plots
library(gtsummary) # summary statistics and tests
library(here) # helps with file management
library(knitr)
library(janitor) # for data cleaning, making tables
library(wesanderson) # ggplot2 palettes
library(paletteer) # extra ggplot2 palettes
library(dplyr)
library(broom)
library(stringr)
library(viridisLite)
library(glue) # this was added so gt() would show
library(gt)
print(Metal_Bands_BSTA)
metal_bands <- Metal_Bands_BSTA # previewed the data to get a peek of how it's formatted
skim_metal <- skim(metal_bands) %>% as_tibble() %>% print() # saved skim() to keep as a reference point
# filter, make data table showing only U.S. bands
metal_filtered <- metal_bands %>%
filter(origin %in% ("USA"))
# remove the column "...1" (ranked in popularity) and "split" since it is not important in this analysis and takes up space
metal_filtered <- subset(metal_filtered, select = -c(1,6))
# this allows me to minimize unnecessary bulk so I can transform and analyze easier
# mutate and create new table with a factored column labeling which bands formed between the years 1980-1989 and 1990-1999
metal_new <- metal_filtered %>%
mutate(
formed_category = case_when(
formed >= 1980 &
formed < 1990 ~ "1980-1989",
formed >= 1990 &
formed < 2000 ~ "1990-1999"
)) %>%
mutate(formed_category = factor(formed_category))
metal_new <- na.omit(metal_new) # this gets rid of all rows containing N/A
# na.omit shows only bands (all styles) that formed within the two decades
skim_metal_new <- skim(metal_new) %>% as_tibble() %>% print()
# saved this skim table as another reference point, making sure there are no missing values and the completion rate is 1 for all columns
#454 out of 5,000 bands (all styles) that formed in the USA between 1980-1999
# Reminder: objective is to find out the growth/loss rate of bands that are death and/or black metal in the USA, between the two decades
metal_complete <- dplyr::filter( # dplyr::filter because this wouldn't work without specifically calling the package
metal_new, grepl("death|black", style, ignore.case = TRUE)) %>% #grepl(keywords, column)
filter(!duplicated(band_name)) # use !duplicated to make extra sure there is no overlap in band_names
(head(metal_complete)) %>% print()
skim_metal_complete <- skim(metal_complete) %>% as_tibble()  # saved for another reference point, looking at this table I'm able to see the band count for either black or death metal style has dropped to 122 over the 2 decades
# Reminder: objective is to find out the growth/loss rate of bands that are death and/or black metal in the USA, between the two decades
# shows/organizes how many bands were formed, between the two decades
decade_count <- metal_complete %>%
group_by(formed_category) %>%
summarize(count = n())
gt(decade_count)
# saved this to compare for analysis and visualization, n = 122, 80s = 43, 90s = 79
# shows/organizes total fans between the two decades
fan_count <- metal_complete %>% # shows decade sum of fans
group_by(formed_category) %>%
summarize(sum_fans = sum(fans)) %>% print()
# n = 18,117, 80s = 10,408, 90s = 7709
N_fan_count <- sum(fan_count$sum_fans) # used this to pull for later if needed
# shows/organizes the average # of fans per band between the two decades
mean_fan_group <- metal_complete %>%
group_by(formed_category) %>%
summarize(mean_fans = mean(fans)) %>% print()
# avg 242 fans/band in 80s, avg 97.6 fans/band in 90s
count_and_mean_fans <- bind_cols(fan_count, mean_fan_group[2])
gt(count_and_mean_fans)
# noted- 80s = n(43), 90s = n(79) - the data is showing that though there were less death/black metal bands formed in the 80's the bands that were formed during this period had significantly more fans than those formed in the 90s
# breaking down these transformations below, into separate tables, is easier for me to understand what I'm looking at and understand, then after looking at them individually, I will bind them into one data frame and then look at the whole picture
# shows/organizes band formation count per year 1980-1999
i_fan_count <- metal_complete %>%
group_by(formed) %>%
summarize(count = n()) %>%
print()
# shows/organizes total amount of fans per year 1980-1999
i_fan_sum <- metal_complete %>%
group_by(formed) %>%
summarize(sum_fans = sum(fans)) %>%
print()
# shows/organizes average fans per year 1980-1999
mean_i_fan_count <- metal_complete %>%
group_by(formed) %>%
summarize(mean_fans = mean(fans)) %>% print()
# combined 3 data frames from above, [] extracts the column wanted, avoiding duplicate columns
summary_i_fans <- bind_cols(i_fan_count, i_fan_sum[2], mean_i_fan_count[2]) %>% print()
# same process as last time I used case_when() but I'm just adding this to the new data frame for making it easier on me when I start making data visualizations (this is the only character variable besides USA, which is all the same)
use_summary_i_fans <- summary_i_fans %>%
mutate(
formed_category = case_when(
formed >= 1980 &
formed < 1990 ~ "1980-1989",
formed >= 1990 &
formed < 2000 ~ "1990-1999")) %>%
mutate(formed_category = factor(formed_category))
# rearranged columns so the years could be together for easier interpretations
use_summary_i_fans <- use_summary_i_fans[, c(1,5,2,3,4)] %>% print()
# this was a function I spent way too much time on trying to figure out the differences and changes (rate) in fan counts per year, shout out to stack exchange
formation_rate <- use_summary_i_fans %>%
# first sort by year, most likely this was but helps make sure it's all uniform
arrange(formed) %>%
mutate(Diff_year = formed - lag(formed),  # Difference in time (just in case there are gaps)
Diff_fans = sum_fans - lag(sum_fans), # Difference in count between years
fan_rate_percent = (Diff_fans / Diff_year)/sum_fans * 100) %>%
mutate(Diff_year = formed - lag(formed),  # Difference in time (just in case there are gaps)
Diff_count = count - lag(count), # Difference in count between years
count_rate_percent = (Diff_count / Diff_year)/count * 100) %>% print()
# Reminder: objective is to find out the growth/loss rate of bands that are death and/or black metal in the USA, between the two decades
density_sum_fans <- ggplot(data = formation_rate,
aes(x = sum_fans,
fill = formed_category # must always be categorical
)) +
geom_density(alpha = 0.3) # transparency +
scale_fill_discrete(name = "Decade") # renames the legend +
labs(
x = "Fans per Year",
y = "Density",
title = "Density Plot of Total Fans Accumulated per Year (1980-1999)")
density_sum_fans
library(ggridges)
ridgeline_mean_fans<- ggplot(data = use_summary_i_fans,
aes(x = mean_fans,
y = formed_category)) +
geom_density_ridges_gradient() +
aes(fill = formed_category) +
scale_fill_discrete(name = "Decade") +
labs(
x = "Average Fans Accumulated per Year",
y = "Decade",
title = "Ridgeline Density Plot of Average Fans Accumulated per Year (1980-1999)") +
theme(axis.text.x = element_text(angle = -30, hjust = 0))
ridgeline_mean_fans
count_rate_diff <-
ggplot(data = formation_rate,
aes(x = formed,
y = count_rate_percent)) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0)+
theme_bw() +
labs(
x = "Year",
y = "Band Formation Rate (%) Per Year (1980-1999)",
title = "Change in Rate of Bands Formed per Year",
subtitle = "to detect patterns of band formation growth or reduction")
count_rate_diff
count_diff <-
ggplot(data = formation_rate,
aes(x = formed,
y = fan_rate_percent)) +
geom_line()+ # left out hline and geom_point since it seemed unnecessary
theme_bw() +
labs(
x = "Year",
y = "Fan Rate (%) Per Year (1980-1999)",
title = "Change in Rate of Fans per Year",
subtitle = "to detect patterns of fan growth or reduction")
count_diff
combined_graph_count <- ggplot(formation_rate)+
geom_line(mapping= aes(x = formed,
y = count, color = "purple"))+
geom_line(mapping= aes(x = formed,
y = Diff_count, color = "orange")) +
geom_hline(yintercept = 0, size = 0.5) +
geom_vline(xintercept = 1990) +
theme(legend.position = "none") +
labs(
x = "Year Bands Formed",
y = "Band Formation Count +/-",
title = "Line Graph of Bands Formed + Net Losses/Gains per Year")
combined_graph_count
blogdown:::serve_site()
$ choco install hugo -confirm
choco install hugo -confirm
./hugo
blogdown:::serve_site()
install.packages(c("broom.helpers", "checkmate", "cli", "dplyr", "ggplot2", "gt", "gtsummary", "labelled", "MASS", "moderndive", "nloptr", "openssl", "ps", "quantreg", "RcppArmadillo", "roxygen2", "testthat", "tibble", "usethis", "xfun"))
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
https://github.com/MfromOregon/FirstBlog.git
install.packages("githubinstall")
install.packages("git2r")
git2r::commit(repo = https://github.com/MfromOregon/FirstBlog)
git --version
git remote add origin https://github.com/MfromOregon/FirstBlog.git
git branch -M main
git push -u origin main
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
install.packages(c("checkmate", "cli", "dplyr", "future", "MASS", "nloptr", "openssl", "packrat", "ps", "quantreg", "RcppArmadillo", "renv", "roxygen2", "testthat", "tibble", "xfun"))
install.packages(c("checkmate", "cli", "dplyr", "MASS", "nloptr", "openssl", "ps", "quantreg", "RcppArmadillo", "roxygen2", "testthat", "tibble", "xfun"))
blogdown:::serve_site()
rmarkdown::render_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
library(blogdown)
library(broom)
library(extrafont)
library(fontawesome)
blogdown:::preview_site()
blogdown:::serve_site()
knitr::opts_chunk$set(error = FALSE, comment = NA, warnings = FALSE, errors = FALSE, messages = FALSE, tidy = FALSE, cache = TRUE)
library(tidyverse)
library(extrafont)
library(here)
library(ggthemes)
library(readr)
blogdown:::serve_site()
library(readr)
artwork_cleaned <- read_csv("artworks-cleaned.csv")
library(readr)
artwork_cleaned <- read_csv("artworks-cleaned.csv")
moma_chal5 <- artwork_cleaned %>%
mutate(surface_area = (height_cm * width_cm)*.01) %>% # new column labeled hw_ratio, meters squared!
filter(num_artists == 1)
moma_chal5
moma_chal5 %>% ggplot(aes(
x = year_acquired,
y = surface_area,
color = artist_gender)) +
geom_line()
View(moma_chal5)
moma_chal5 <- artwork_cleaned %>%
mutate(surface_area = (height_cm * width_cm)*.01) %>% # new column labeled hw_ratio, meters squared!
filter(num_artists == 1)
moma_plot <- moma_chal5 %>%
filter(artist_gender == "Male") %>%
ggplot(aes(
x = year_acquired,
y = surface_area,
color = artist_gender)) +
geom_line(alpha = 0.4)
# create data with only females to stack onto the males plot
female_artists <- moma_chal5 %>%
filter(artist_gender == "Female")
moma_plot_all <- moma_plot +
geom_line(data =  female_artists, color = "#800080", alpha = 0.5) +
labs(x = "Year Acquired",
y = "Painting Surface Area (meters squared)",
title = "Surface Area of MoMA Paintings By Gender") +
theme_few(base_size = 10) +
theme(legend.position = "none") +
annotate(x = 1992, y = 6000, geom = "text",
label = "Male Artists", color = "#ee5863",
size = 4, family = "Lato", hjust = 1, fontface = 1) +
annotate(x = 2000, y = 9000, geom = "text",
label = "Female Artists", color = "#800080",
size = 4, family = "Lato", hjust = 1, fontface = 1)
moma_plot_all
line_plot_sounds
line_plot_sounds <- ggplot(sounds, aes(
x = age,
y = prop_produce)) +
geom_line(aes(group = sound)) +
# geom_line is grouped by sound, meaning the lines will connect to each sound group point (3 different line plots vs 1 fully connected line plot)
geom_point(aes(color = sound), size = 2) +
# geom_point also grouped by color by sound
labs(x = "Age (months)",
y = "Proportion of Children Producing")
library(usethis)
blogdown::config_netlify()
y
install.packages("cli")
install.packages(c("cli", "collapse", "dbplyr", "e1071", "hardhat", "parallelly", "pkgdown", "processx", "proxy", "sp"))
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(wordbankr)
library(here)
library(RColorBrewer)
library(wesanderson)
library(ggthemes)
library(ggsci)
library(beyonce)
library(tidyverse)
library(readr)
library(wordbankr)
library(here)
library(RColorBrewer)
library(wesanderson)
library(ggthemes)
library(ggsci)
library(cowplot)
library(viridis)
library(forcats)
library(colorspace)
library(colorblindr)
library(tidyverse)
library(readr)
library(wordbankr)
library(here)
library(RColorBrewer)
library(wesanderson)
library(ggthemes)
library(ggsci)
library(cowplot)
library(viridis)
library(forcats)
library(colorspace)
library(ggrepel)
library(ggplot2)
library(readr)
animal_sounds_summary <- read_csv("content/projects/animal_sounds_analysis/animal_sounds_datasets/animal_sounds_summary.csv")
View(animal_sounds_summary)
sounds <- read_csv("content/projects/animal_sounds_analysis/animal_sounds_datasets/animal_sounds_summary.csv")
sounds <- read_csv("animal_sounds_summary.csv")
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")# If you don't define format here, you'll need put `format = "html"` in every kable function.
options(scipen = 1, digits = 2)# You may also wish to set this option, to handle number formatting
flights %>% head %>%
mutate(dept_time = as.Date(paste0("2014/", month, "/", day)))
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")# If you don't define format here, you'll need put `format = "html"` in every kable function.
options(scipen = 1, digits = 2)# You may also wish to set this option, to handle number formatting
library(tidyverse)
library(devtools)
library(dplyr)
devtools::install_github("ismayc/pnwflights14")
library(pnwflights14)
library(gt)
library(lubridate)
library(glue)
library(forcats)
library(ggplot2)
library(broom)
library(extraDistr)
library(extrafont)
library(gtsummary)
library(knitr)
library(skimr)
library(janitor)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")# If you don't define format here, you'll need put `format = "html"` in every kable function.
options(scipen = 1, digits = 2)# You may also wish to set this option, to handle number formatting
data("flights", package = "pnwflights14")
data("weather", package = "pnwflights14")
data("airports", package = "pnwflights14")
data("airlines", package = "pnwflights14")
flights %>% head %>%
mutate(dept_time = as.Date(paste0("2014/", month, "/", day)))
flights %>% filter(origin == "PDX") %>%
mutate(dep_ts = make_datetime(year, month, day, hour, minute)) %>%
mutate(sched_ts = dep_ts - make_difftime(minutes = dep_delay)) %>%
mutate(sched_hr = hour(sched_ts)) %>%
group_by(dest, sched_hr) %>%
tally %>% arrange(dest, sched_hr, desc(n)) %>%
ggplot(aes(x = sched_hr,
y = n)) + geom_col() +
facet_wrap(~dest)
flights_ver_date <- flights %>%
filter(origin == "PDX") %>%
mutate(dep_ts = make_datetime(year, month, day, hour, minute)) %>%
mutate(sched_ts = dep_ts - make_difftime(minutes = dep_delay)) %>%
mutate(sched_hr = hour(sched_ts)) %>%
select(-c(year, day, tailnum, flight, origin)) %>%
view()
flights_ver_date %>% filter(
sched_hr >= 12) %>%
select(carrier, dest, dep_time, dep_delay, sched_hr) %>%
group_by(carrier, dest) %>% tidyr::drop_na() %>%
# select(carrier, dest, sched_hr) %>% view()
# mutate(dep_hr = hour(dep_time)) %>% view()
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")# If you don't define format here, you'll need put `format = "html"` in every kable function.
options(scipen = 1, digits = 2)# You may also wish to set this option, to handle number formatting
flights_ver_date <- flights %>%
filter(origin == "PDX") %>%
mutate(dep_ts = make_datetime(year, month, day, hour, minute)) %>%
mutate(sched_ts = dep_ts - make_difftime(minutes = dep_delay)) %>%
mutate(sched_hr = hour(sched_ts)) %>%
select(-c(year, day, tailnum, flight, origin))
flights_ver_date %>% filter(
sched_hr >= 12) %>%
select(carrier, dest, dep_time, dep_delay, sched_hr) %>%
group_by(carrier, dest) %>% tidyr::drop_na()
# select(carrier, dest, sched_hr) %>% view()
# mutate(dep_hr = hour(dep_time)) %>% view()
flights_ver_date %>% group_by(carrier, dest) %>%
select(dest, carrier, dep_time)
flights_ver_date %>% filter(is.na(dep_time)) %>% count()
# 380 flights cancelled in PDX in 2014
summarise(flights_ver_date, delay_min = mean(dep_delay, na.rm = TRUE))
#the avg minutes of flights delayed departures in PDX in 2014 is 5.7 minutes
flights_ver_date %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate(
arr_delay_total = sum(arr_delay),
arr_delay_prop = arr_delay / arr_delay_total
) %>%
select(
dest, month,dep_time, carrier,
arr_delay, arr_delay_prop
) %>%
arrange(dest, desc(arr_delay_prop))
#Using lag() explore how the delay of a flight is related to the delay of the immediately preceding flight.
lagged_delays <- flights_ver_date %>%
arrange(dep_delay) %>%
mutate(dep_delay_lag = lag(dep_delay)) %>%
filter(!is.na(dep_delay), !is.na(dep_delay_lag)) %>%
select(month, dep_delay, arr_delay, dep_delay_lag, carrier, dest) %>% mutate(
lag_total = (dep_delay_lag + arr_delay)) %>%
group_by(carrier, month) %>% view()
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")# If you don't define format here, you'll need put `format = "html"` in every kable function.
options(scipen = 1, digits = 2)# You may also wish to set this option, to handle number formatting
cancelled_2014 <-
flights_ver_date %>%
mutate(cancelled = (is.na(arr_delay) | is.na(dep_delay))) %>%
group_by(carrier) %>%
summarise(
cancelled_num = sum(cancelled), # how many flights cancelled over the year per carrier
flights_num = n(), # num flights over the year per carrier
) %>% inner_join(x = airlines) %>%
arrange(desc(cancelled_num))
cancelled_2014
library(extrafont)
library(showtext)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.table.format = "html")# If you don't define format here, you'll need put `format = "html"` in every kable function.
options(scipen = 1, digits = 2)# You may also wish to set this option, to handle number formatting
library(tidyverse)
library(devtools)
library(dplyr)
devtools::install_github("ismayc/pnwflights14")
library(pnwflights14)
library(gt)
library(lubridate)
library(glue)
library(forcats)
library(ggplot2)
library(broom)
library(extraDistr)
library(extrafont)
library(gtsummary)
library(knitr)
library(skimr)
library(janitor)
